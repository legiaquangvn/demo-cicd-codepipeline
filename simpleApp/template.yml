AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"

# Parameters definitions
Parameters:
  MyEnvironment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - staging
      - prod
    Description: Environment of this stack of resources

Mappings:
  ResourcesName:
    dev:
      tableName: REQUEST_TABLE-DEV
    staging:
      tableName: REQUEST_TABLE-STAGING
    prod:
      tableName: REQUEST_TABLE-PROD

Conditions:
  IsProd: !Equals [!Ref MyEnvironment, prod]

# Global information for all the functions
Globals:
  Function:
    Runtime: nodejs12.x
    MemorySize: 128
    Timeout: 5
    Tracing: Active
    CodeUri: ./functions

Resources:
  # Basic definitions for my API Gateway
  MyApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref MyEnvironment
      TracingEnabled: true

  # A function with the most commont attributes
  MySimpleFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      Handler: mySimpleFunction.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref MyDynamoDBTable
      Environment:
        Variables:
          TABLE_NAME: !Ref MyDynamoDBTable
      Events:
        MySimpleFunctionAPI:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /request
            Method: GET

  UpdateCountFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      Handler: updateCountFunction.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref MyDynamoDBTable
      Environment:
        Variables:
          TABLE_NAME: !Ref MyDynamoDBTable
      Events:
        MySimpleFunctionAPI:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /updateCount
            Method: POST
  ProcessDynamoDBStream:
    Type: AWS::Serverless::Function
    Properties:
      Handler: processDynamoDbStream.handler
      Policies:
        # - AWSLambdaBasicExecutionRole
        # - AmazonDynamoDBFullAccess
        # - AmazonS3FullAccess
        # - AWSLambdaDynamoDBExecutionRole
        - AWSLambdaDynamoDBExecutionRole
        - DynamoDBStreamReadPolicy
            TableName: !Ref MyDynamoDBTable
            StreamName: '*'
      Events:
        Stream:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt MyDynamoDBTable.StreamArn
            BatchSize: 100
            # StartingPosition: TRIM_HORIZON
            StartingPosition: LATEST
  HelloWorld:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: helloWorld.handler
      AutoPublishAlias: live
      Description: 'Lambda function for CD Demo'
      DeploymentPreference:
          Type: Linear10PercentEvery1Minute
          Alarms:
            - !Ref AliasErrorMetricGreaterThanZeroAlarm
            - !Ref LatestVersionErrorMetricGreaterThanZeroAlarm
          Hooks:
            PreTraffic: !Ref PreTrafficHook
            PostTraffic: !Ref PostTrafficHook
      Events:
        HelloWorldAPI:
          Type: Api
          Properties:
            Path: /helloworld
            Method: get
          
  AliasErrorMetricGreaterThanZeroAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmDescription: Lambda Function Error > 0
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: Resource
          Value: !Sub "${HelloWorld}:live"
        - Name: FunctionName
          Value: !Ref HelloWorld
      EvaluationPeriods: 2
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 0

  LatestVersionErrorMetricGreaterThanZeroAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmDescription: Lambda Function Error > 0
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: Resource
          Value: !Sub "${HelloWorld}:live"
        - Name: FunctionName
          Value: !Ref HelloWorld
        - Name: ExecutedVersion
          Value: !GetAtt HelloWorld.Version.Version
      EvaluationPeriods: 2
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 0

  PreTrafficHook:
    Type: AWS::Serverless::Function
    Properties:
      Handler: preTrafficHook.handler      
      FunctionName: 'CodeDeployHook_PreTrafficHook'
      Policies:
        - Version: "2012-10-17"
          Statement: 
          - Effect: "Allow"
            Action: 
              - "codedeploy:PutLifecycleEventHookExecutionStatus"
            Resource:
              !Sub 'arn:aws:codedeploy:${AWS::Region}:${AWS::AccountId}:deploymentgroup:${ServerlessDeploymentApplication}/*'
        - Version: "2012-10-17"
          Statement: 
          - Effect: "Allow"
            Action: 
              - "lambda:InvokeFunction"
            Resource: !Ref HelloWorld.Version
      DeploymentPreference:
        Enabled: false
      Environment:
        Variables:
          NewVersion: !Ref HelloWorld.Version

  PostTrafficHook:
    Type: AWS::Serverless::Function
    Properties:
      Handler: postTrafficHook.handler      
      FunctionName: 'CodeDeployHook_PostTrafficHook'
      Policies:
        - Version: "2012-10-17"
          Statement: 
          - Effect: "Allow"
            Action: 
              - "codedeploy:PutLifecycleEventHookExecutionStatus"
            Resource:
              !Sub 'arn:aws:codedeploy:${AWS::Region}:${AWS::AccountId}:deploymentgroup:${ServerlessDeploymentApplication}/*'
        - Version: "2012-10-17"
          Statement: 
          - Effect: "Allow"
            Action: 
              - "lambda:InvokeFunction"
            Resource: !Ref HelloWorld.Version
      DeploymentPreference:
        Enabled: false
      Environment:
        Variables:
          NewVersion: !Ref HelloWorld.Version

  MyDynamoDBTable:
    Type: "AWS::DynamoDB::Table"        
    Properties:
      AttributeDefinitions:
        - AttributeName: PartitionKey
          AttributeType: S
        - AttributeName: SortKey
          AttributeType: S
        - AttributeName: WorkerID
          AttributeType: S
      KeySchema:
        - AttributeName: PartitionKey
          KeyType: HASH
        - AttributeName: SortKey
          KeyType: RANGE
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      BillingMode: PAY_PER_REQUEST  
      TableName: !FindInMap [ResourcesName, !Ref MyEnvironment, tableName]
        
Outputs:
  Region:
    Description: "Region"
    Value: !Ref AWS::Region

  ApiId:
    Description: "API ID"
    Value: !Ref MyApi

  ApiUrl:
    Description: "API endpoint URL for Prod environment"
    Value: !Sub "https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/dev/"
